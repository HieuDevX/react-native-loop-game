/*
  Svg implementation failed very badly.
  It didn't even updated on under powered devices
  barely managed to rotate circle pieces on Moto Z2 force SD 835
  Tests were done on release build
  Now I'll try with Native Views O hope it works lol

  I thought to do this in canvas but canvas use WebView under the hood so that'a no go as well
*/

import React, { useState } from 'react';
import { View, Text } from 'react-native';
import color from 'color';
import PropTypes, { func } from 'prop-types';
import Svg, * as Shapes from 'react-native-svg';
import times from 'lodash/times';
import { dimensions } from 'rn-hgl';

import PageView from 'components/PageView';

import styles from './styles';

const rotations = [0, 90, 180, 270];

function getKey(x, y) {
  return `${x}-${y}`;
}

function useRotate(grid) {
  const obj = {};

  grid.forEach((row) => {
    row.forEach(({ x, y }) => {
      obj[getKey(x, y)] = 0;
    });
  });

  const [rotate, setValue] = useState(obj);
  function setRotate(x, y) {
    const key = getKey(x, y);
    console.log(key);
    // return;
    let r = rotate[key] + 1;
    if (r > 3) {
      r = 0;
    }
    setValue({ ...rotate, [key]: r });
  }
  return [rotate, setRotate];
}

export default function LevelScreen({ navigation }) {
  const row = 6;
  const column = 6;
  const grid = times(column).map((_, y) => times(row).map((_, x) => ({ x, y })));
  const strokeWidth = 6;
  const size = (dimensions.width - row - 1) / row;
  const origin = size / 2;
  const [rotate, setRotate] = useRotate(grid);
  return (
    <PageView navigation={navigation} style={styles.container}>
      <Svg width={dimensions.width} height={dimensions.height}>
        {grid.map((rowGrid) =>
          rowGrid.map(({ x, y }) => {
            const key = getKey(x, y);
            return (
              <Shapes.G
                key={key}
                transform={`rotate(0 ${origin + x * size} ${origin + y * size})`}
                onPress={() => setRotate(x, y)}
              >
                <Shapes.Rect
                  x={x + x * size + 1}
                  y={y + y * size + 1}
                  width={size}
                  height={size}
                  fill="red"
                  strokeWidth={2}
                  // stroke="blue"
                />
                <Shapes.Path
                  x={0}
                  y={0}
                  // x={size*x+x+.5}
                  // y={size*y+y+1}
                  strokeWidth={6}
                  stroke="black"
                  d={`M ${size * x + size} ${size * y + size} L ${size * x} ${size * y}`}
                  // d={`M ${size} ${size} L ${0} ${0}`}
                />
                <Shapes.G
                  transform={`rotate(${rotations[rotate[key]]} ${origin + x * size} ${origin +
                    y * size})`}
                >
                  <Shapes.Rect
                    x={x + x * size + 1}
                    y={y + y * size + 1}
                    width={size}
                    height={size}
                    fill="rgba(0,0,0,0.0)"
                    strokeWidth={2}
                    // stroke="blue"
                  />
                  <Shapes.Path
                    // x={size*x}
                    // y={size*y}
                    strokeWidth={6}
                    stroke="black"
                    fill="none"
                    d={describeArc(size * x + size, size * y, size * 0.5, 180, 270)}
                    // d={`M ${size} ${size} L ${0} ${0}`}
                  />
                </Shapes.G>
              </Shapes.G>
            );
          }),
        )}
      </Svg>
    </PageView>
  );
}

LevelScreen.propTypes = {
  navigation: PropTypes.object.isRequired,
};

function polarToCartesian(centerX, centerY, radius, angleInDegrees) {
  const angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;

  return {
    x: centerX + radius * Math.cos(angleInRadians),
    y: centerY + radius * Math.sin(angleInRadians),
  };
}

function describeArc(x, y, radius, startAngle, endAngle) {
  const start = polarToCartesian(x, y, radius, endAngle);
  const end = polarToCartesian(x, y, radius, startAngle);
  const arcSweep = endAngle - startAngle <= 180 ? 0 : 1;
  const d = ['M', start.x, start.y, 'A', radius, radius, 0, arcSweep, 0, end.x, end.y].join(' ');

  return d;
}

// <View style={boxStyle}>
//   <Svg width="120" height="120" fill="rgba(0,0,0,0)">
//     <Shapes.Path
//       x={0}
//       y={0}
//       d={describeArc(50, 50, 50, 0, 90)}
//       stroke="red"
//       strokeWidth="6"
//     />
//     <Shapes.Path
//       x={0}
//       y={0}
//       d={describeArc(50, 50, 50, 90, 180)}
//       stroke="red"
//       strokeWidth="6"
//     />
//     <Shapes.Path
//       x={0}
//       y={0}
//       d={describeArc(50, 50, 50, 180, 270)}
//       stroke="red"
//       strokeWidth="6"
//     />
//     <Shapes.Path
//       x={0}
//       y={0}
//       d={describeArc(50, 50, 50, 270, 0)}
//       stroke="red"
//       strokeWidth="6"
//     />
//   </Svg>
// </View>
// <View style={{...boxStyle, transform: [{
//   rotate: '0deg'
// }]}}>
//   <Svg width="120" height="120" fill="rgba(0,0,0,0)">
//     <Shapes.Path
//       x={0}
//       y={0}
//       d={describeArc(100, 0, 50, 180, 270)}
//       stroke="red"
//       strokeWidth="6"
//     />
//   </Svg>
// </View>
